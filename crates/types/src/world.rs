// ****
// Auto-generated by cainome do not edit.
// ****

#![allow(clippy::all)]
#![allow(warnings)]

#[derive(Debug)]
pub struct WorldContract<A: starknet::accounts::ConnectedAccount + Sync> {
    pub address: starknet::core::types::Felt,
    pub account: A,
    pub block_id: starknet::core::types::BlockId,
}
impl<A: starknet::accounts::ConnectedAccount + Sync> WorldContract<A> {
    pub fn new(address: starknet::core::types::Felt, account: A) -> Self {
        Self {
            address,
            account,
            block_id: starknet::core::types::BlockId::Tag(starknet::core::types::BlockTag::Pending),
        }
    }
    pub fn set_contract_address(&mut self, address: starknet::core::types::Felt) {
        self.address = address;
    }
    pub fn provider(&self) -> &A::Provider {
        self.account.provider()
    }
    pub fn set_block(&mut self, block_id: starknet::core::types::BlockId) {
        self.block_id = block_id;
    }
    pub fn with_block(self, block_id: starknet::core::types::BlockId) -> Self {
        Self { block_id, ..self }
    }
}
#[derive(Debug)]
pub struct WorldContractReader<P: starknet::providers::Provider + Sync> {
    pub address: starknet::core::types::Felt,
    pub provider: P,
    pub block_id: starknet::core::types::BlockId,
}
impl<P: starknet::providers::Provider + Sync> WorldContractReader<P> {
    pub fn new(address: starknet::core::types::Felt, provider: P) -> Self {
        Self {
            address,
            provider,
            block_id: starknet::core::types::BlockId::Tag(starknet::core::types::BlockTag::Pending),
        }
    }
    pub fn set_contract_address(&mut self, address: starknet::core::types::Felt) {
        self.address = address;
    }
    pub fn provider(&self) -> &P {
        &self.provider
    }
    pub fn set_block(&mut self, block_id: starknet::core::types::BlockId) {
        self.block_id = block_id;
    }
    pub fn with_block(self, block_id: starknet::core::types::BlockId) -> Self {
        Self { block_id, ..self }
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct ContractDeployed {
    pub salt: starknet::core::types::Felt,
    pub class_hash: cainome::cairo_serde::ClassHash,
    pub address: cainome::cairo_serde::ContractAddress,
    pub namespace: cainome::cairo_serde::ByteArray,
    pub name: cainome::cairo_serde::ByteArray,
}
impl cainome::cairo_serde::CairoSerde for ContractDeployed {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.salt);
        __size += cainome::cairo_serde::ClassHash::cairo_serialized_size(&__rust.class_hash);
        __size += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&__rust.address);
        __size += cainome::cairo_serde::ByteArray::cairo_serialized_size(&__rust.namespace);
        __size += cainome::cairo_serde::ByteArray::cairo_serialized_size(&__rust.name);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(starknet::core::types::Felt::cairo_serialize(&__rust.salt));
        __out.extend(cainome::cairo_serde::ClassHash::cairo_serialize(
            &__rust.class_hash,
        ));
        __out.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            &__rust.address,
        ));
        __out.extend(cainome::cairo_serde::ByteArray::cairo_serialize(
            &__rust.namespace,
        ));
        __out.extend(cainome::cairo_serde::ByteArray::cairo_serialize(
            &__rust.name,
        ));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let salt = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&salt);
        let class_hash = cainome::cairo_serde::ClassHash::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ClassHash::cairo_serialized_size(&class_hash);
        let address = cainome::cairo_serde::ContractAddress::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&address);
        let namespace = cainome::cairo_serde::ByteArray::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ByteArray::cairo_serialized_size(&namespace);
        let name = cainome::cairo_serde::ByteArray::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ByteArray::cairo_serialized_size(&name);
        Ok(ContractDeployed {
            salt,
            class_hash,
            address,
            namespace,
            name,
        })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct ContractInitialized {
    pub selector: starknet::core::types::Felt,
    pub init_calldata: Vec<starknet::core::types::Felt>,
}
impl cainome::cairo_serde::CairoSerde for ContractInitialized {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.selector);
        __size += Vec::<starknet::core::types::Felt>::cairo_serialized_size(&__rust.init_calldata);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.selector,
        ));
        __out.extend(Vec::<starknet::core::types::Felt>::cairo_serialize(
            &__rust.init_calldata,
        ));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let selector = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&selector);
        let init_calldata =
            Vec::<starknet::core::types::Felt>::cairo_deserialize(__felts, __offset)?;
        __offset += Vec::<starknet::core::types::Felt>::cairo_serialized_size(&init_calldata);
        Ok(ContractInitialized {
            selector,
            init_calldata,
        })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct ContractUpgraded {
    pub class_hash: cainome::cairo_serde::ClassHash,
    pub address: cainome::cairo_serde::ContractAddress,
}
impl cainome::cairo_serde::CairoSerde for ContractUpgraded {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += cainome::cairo_serde::ClassHash::cairo_serialized_size(&__rust.class_hash);
        __size += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&__rust.address);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(cainome::cairo_serde::ClassHash::cairo_serialize(
            &__rust.class_hash,
        ));
        __out.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            &__rust.address,
        ));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let class_hash = cainome::cairo_serde::ClassHash::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ClassHash::cairo_serialized_size(&class_hash);
        let address = cainome::cairo_serde::ContractAddress::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&address);
        Ok(ContractUpgraded {
            class_hash,
            address,
        })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct DifferProgramHashUpdate {
    pub program_hash: starknet::core::types::Felt,
}
impl cainome::cairo_serde::CairoSerde for DifferProgramHashUpdate {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.program_hash);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.program_hash,
        ));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let program_hash = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&program_hash);
        Ok(DifferProgramHashUpdate { program_hash })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct FactsRegistryUpdate {
    pub address: cainome::cairo_serde::ContractAddress,
}
impl cainome::cairo_serde::CairoSerde for FactsRegistryUpdate {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&__rust.address);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            &__rust.address,
        ));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let address = cainome::cairo_serde::ContractAddress::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&address);
        Ok(FactsRegistryUpdate { address })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct FieldLayout {
    pub selector: starknet::core::types::Felt,
    pub layout: Layout,
}
impl cainome::cairo_serde::CairoSerde for FieldLayout {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.selector);
        __size += Layout::cairo_serialized_size(&__rust.layout);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.selector,
        ));
        __out.extend(Layout::cairo_serialize(&__rust.layout));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let selector = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&selector);
        let layout = Layout::cairo_deserialize(__felts, __offset)?;
        __offset += Layout::cairo_serialized_size(&layout);
        Ok(FieldLayout { selector, layout })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct MergerProgramHashUpdate {
    pub program_hash: starknet::core::types::Felt,
}
impl cainome::cairo_serde::CairoSerde for MergerProgramHashUpdate {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.program_hash);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.program_hash,
        ));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let program_hash = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&program_hash);
        Ok(MergerProgramHashUpdate { program_hash })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct MetadataUpdate {
    pub resource: starknet::core::types::Felt,
    pub uri: cainome::cairo_serde::ByteArray,
}
impl cainome::cairo_serde::CairoSerde for MetadataUpdate {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.resource);
        __size += cainome::cairo_serde::ByteArray::cairo_serialized_size(&__rust.uri);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.resource,
        ));
        __out.extend(cainome::cairo_serde::ByteArray::cairo_serialize(
            &__rust.uri,
        ));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let resource = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&resource);
        let uri = cainome::cairo_serde::ByteArray::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ByteArray::cairo_serialized_size(&uri);
        Ok(MetadataUpdate { resource, uri })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct ModelRegistered {
    pub name: cainome::cairo_serde::ByteArray,
    pub namespace: cainome::cairo_serde::ByteArray,
    pub class_hash: cainome::cairo_serde::ClassHash,
    pub address: cainome::cairo_serde::ContractAddress,
}
impl cainome::cairo_serde::CairoSerde for ModelRegistered {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += cainome::cairo_serde::ByteArray::cairo_serialized_size(&__rust.name);
        __size += cainome::cairo_serde::ByteArray::cairo_serialized_size(&__rust.namespace);
        __size += cainome::cairo_serde::ClassHash::cairo_serialized_size(&__rust.class_hash);
        __size += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&__rust.address);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(cainome::cairo_serde::ByteArray::cairo_serialize(
            &__rust.name,
        ));
        __out.extend(cainome::cairo_serde::ByteArray::cairo_serialize(
            &__rust.namespace,
        ));
        __out.extend(cainome::cairo_serde::ClassHash::cairo_serialize(
            &__rust.class_hash,
        ));
        __out.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            &__rust.address,
        ));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let name = cainome::cairo_serde::ByteArray::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ByteArray::cairo_serialized_size(&name);
        let namespace = cainome::cairo_serde::ByteArray::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ByteArray::cairo_serialized_size(&namespace);
        let class_hash = cainome::cairo_serde::ClassHash::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ClassHash::cairo_serialized_size(&class_hash);
        let address = cainome::cairo_serde::ContractAddress::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&address);
        Ok(ModelRegistered {
            name,
            namespace,
            class_hash,
            address,
        })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct ModelUpgraded {
    pub name: cainome::cairo_serde::ByteArray,
    pub namespace: cainome::cairo_serde::ByteArray,
    pub class_hash: cainome::cairo_serde::ClassHash,
    pub prev_class_hash: cainome::cairo_serde::ClassHash,
    pub address: cainome::cairo_serde::ContractAddress,
    pub prev_address: cainome::cairo_serde::ContractAddress,
}
impl cainome::cairo_serde::CairoSerde for ModelUpgraded {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += cainome::cairo_serde::ByteArray::cairo_serialized_size(&__rust.name);
        __size += cainome::cairo_serde::ByteArray::cairo_serialized_size(&__rust.namespace);
        __size += cainome::cairo_serde::ClassHash::cairo_serialized_size(&__rust.class_hash);
        __size += cainome::cairo_serde::ClassHash::cairo_serialized_size(&__rust.prev_class_hash);
        __size += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&__rust.address);
        __size +=
            cainome::cairo_serde::ContractAddress::cairo_serialized_size(&__rust.prev_address);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(cainome::cairo_serde::ByteArray::cairo_serialize(
            &__rust.name,
        ));
        __out.extend(cainome::cairo_serde::ByteArray::cairo_serialize(
            &__rust.namespace,
        ));
        __out.extend(cainome::cairo_serde::ClassHash::cairo_serialize(
            &__rust.class_hash,
        ));
        __out.extend(cainome::cairo_serde::ClassHash::cairo_serialize(
            &__rust.prev_class_hash,
        ));
        __out.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            &__rust.address,
        ));
        __out.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            &__rust.prev_address,
        ));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let name = cainome::cairo_serde::ByteArray::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ByteArray::cairo_serialized_size(&name);
        let namespace = cainome::cairo_serde::ByteArray::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ByteArray::cairo_serialized_size(&namespace);
        let class_hash = cainome::cairo_serde::ClassHash::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ClassHash::cairo_serialized_size(&class_hash);
        let prev_class_hash =
            cainome::cairo_serde::ClassHash::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ClassHash::cairo_serialized_size(&prev_class_hash);
        let address = cainome::cairo_serde::ContractAddress::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&address);
        let prev_address =
            cainome::cairo_serde::ContractAddress::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&prev_address);
        Ok(ModelUpgraded {
            name,
            namespace,
            class_hash,
            prev_class_hash,
            address,
            prev_address,
        })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct NamespaceRegistered {
    pub namespace: cainome::cairo_serde::ByteArray,
    pub hash: starknet::core::types::Felt,
}
impl cainome::cairo_serde::CairoSerde for NamespaceRegistered {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += cainome::cairo_serde::ByteArray::cairo_serialized_size(&__rust.namespace);
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.hash);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(cainome::cairo_serde::ByteArray::cairo_serialize(
            &__rust.namespace,
        ));
        __out.extend(starknet::core::types::Felt::cairo_serialize(&__rust.hash));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let namespace = cainome::cairo_serde::ByteArray::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ByteArray::cairo_serialized_size(&namespace);
        let hash = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&hash);
        Ok(NamespaceRegistered { namespace, hash })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct OwnerUpdated {
    pub address: cainome::cairo_serde::ContractAddress,
    pub resource: starknet::core::types::Felt,
    pub value: bool,
}
impl cainome::cairo_serde::CairoSerde for OwnerUpdated {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&__rust.address);
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.resource);
        __size += bool::cairo_serialized_size(&__rust.value);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            &__rust.address,
        ));
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.resource,
        ));
        __out.extend(bool::cairo_serialize(&__rust.value));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let address = cainome::cairo_serde::ContractAddress::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&address);
        let resource = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&resource);
        let value = bool::cairo_deserialize(__felts, __offset)?;
        __offset += bool::cairo_serialized_size(&value);
        Ok(OwnerUpdated {
            address,
            resource,
            value,
        })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct ProgramOutput {
    pub prev_state_root: starknet::core::types::Felt,
    pub new_state_root: starknet::core::types::Felt,
    pub block_number: starknet::core::types::Felt,
    pub block_hash: starknet::core::types::Felt,
    pub config_hash: starknet::core::types::Felt,
    pub world_da_hash: starknet::core::types::Felt,
    pub message_to_starknet_segment: Vec<starknet::core::types::Felt>,
    pub message_to_appchain_segment: Vec<starknet::core::types::Felt>,
}
impl cainome::cairo_serde::CairoSerde for ProgramOutput {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.prev_state_root);
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.new_state_root);
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.block_number);
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.block_hash);
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.config_hash);
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.world_da_hash);
        __size += Vec::<starknet::core::types::Felt>::cairo_serialized_size(
            &__rust.message_to_starknet_segment,
        );
        __size += Vec::<starknet::core::types::Felt>::cairo_serialized_size(
            &__rust.message_to_appchain_segment,
        );
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.prev_state_root,
        ));
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.new_state_root,
        ));
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.block_number,
        ));
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.block_hash,
        ));
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.config_hash,
        ));
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.world_da_hash,
        ));
        __out.extend(Vec::<starknet::core::types::Felt>::cairo_serialize(
            &__rust.message_to_starknet_segment,
        ));
        __out.extend(Vec::<starknet::core::types::Felt>::cairo_serialize(
            &__rust.message_to_appchain_segment,
        ));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let prev_state_root = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&prev_state_root);
        let new_state_root = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&new_state_root);
        let block_number = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&block_number);
        let block_hash = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&block_hash);
        let config_hash = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&config_hash);
        let world_da_hash = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&world_da_hash);
        let message_to_starknet_segment =
            Vec::<starknet::core::types::Felt>::cairo_deserialize(__felts, __offset)?;
        __offset +=
            Vec::<starknet::core::types::Felt>::cairo_serialized_size(&message_to_starknet_segment);
        let message_to_appchain_segment =
            Vec::<starknet::core::types::Felt>::cairo_deserialize(__felts, __offset)?;
        __offset +=
            Vec::<starknet::core::types::Felt>::cairo_serialized_size(&message_to_appchain_segment);
        Ok(ProgramOutput {
            prev_state_root,
            new_state_root,
            block_number,
            block_hash,
            config_hash,
            world_da_hash,
            message_to_starknet_segment,
            message_to_appchain_segment,
        })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct ResourceMetadata {
    pub resource_id: starknet::core::types::Felt,
    pub metadata_uri: cainome::cairo_serde::ByteArray,
}
impl cainome::cairo_serde::CairoSerde for ResourceMetadata {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.resource_id);
        __size += cainome::cairo_serde::ByteArray::cairo_serialized_size(&__rust.metadata_uri);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.resource_id,
        ));
        __out.extend(cainome::cairo_serde::ByteArray::cairo_serialize(
            &__rust.metadata_uri,
        ));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let resource_id = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&resource_id);
        let metadata_uri = cainome::cairo_serde::ByteArray::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ByteArray::cairo_serialized_size(&metadata_uri);
        Ok(ResourceMetadata {
            resource_id,
            metadata_uri,
        })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct StateUpdated {
    pub da_hash: starknet::core::types::Felt,
}
impl cainome::cairo_serde::CairoSerde for StateUpdated {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.da_hash);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.da_hash,
        ));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let da_hash = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&da_hash);
        Ok(StateUpdated { da_hash })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct StorageUpdate {
    pub key: starknet::core::types::Felt,
    pub value: starknet::core::types::Felt,
}
impl cainome::cairo_serde::CairoSerde for StorageUpdate {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.key);
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.value);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(starknet::core::types::Felt::cairo_serialize(&__rust.key));
        __out.extend(starknet::core::types::Felt::cairo_serialize(&__rust.value));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let key = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&key);
        let value = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&value);
        Ok(StorageUpdate { key, value })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct StoreDelRecord {
    pub table: starknet::core::types::Felt,
    pub entity_id: starknet::core::types::Felt,
}
impl cainome::cairo_serde::CairoSerde for StoreDelRecord {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.table);
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.entity_id);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(starknet::core::types::Felt::cairo_serialize(&__rust.table));
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.entity_id,
        ));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let table = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&table);
        let entity_id = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&entity_id);
        Ok(StoreDelRecord { table, entity_id })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct StoreSetRecord {
    pub table: starknet::core::types::Felt,
    pub entity_id: starknet::core::types::Felt,
    pub keys: Vec<starknet::core::types::Felt>,
    pub values: Vec<starknet::core::types::Felt>,
}
impl cainome::cairo_serde::CairoSerde for StoreSetRecord {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.table);
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.entity_id);
        __size += Vec::<starknet::core::types::Felt>::cairo_serialized_size(&__rust.keys);
        __size += Vec::<starknet::core::types::Felt>::cairo_serialized_size(&__rust.values);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(starknet::core::types::Felt::cairo_serialize(&__rust.table));
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.entity_id,
        ));
        __out.extend(Vec::<starknet::core::types::Felt>::cairo_serialize(
            &__rust.keys,
        ));
        __out.extend(Vec::<starknet::core::types::Felt>::cairo_serialize(
            &__rust.values,
        ));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let table = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&table);
        let entity_id = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&entity_id);
        let keys = Vec::<starknet::core::types::Felt>::cairo_deserialize(__felts, __offset)?;
        __offset += Vec::<starknet::core::types::Felt>::cairo_serialized_size(&keys);
        let values = Vec::<starknet::core::types::Felt>::cairo_deserialize(__felts, __offset)?;
        __offset += Vec::<starknet::core::types::Felt>::cairo_serialized_size(&values);
        Ok(StoreSetRecord {
            table,
            entity_id,
            keys,
            values,
        })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct StoreUpdateMember {
    pub table: starknet::core::types::Felt,
    pub entity_id: starknet::core::types::Felt,
    pub member_selector: starknet::core::types::Felt,
    pub values: Vec<starknet::core::types::Felt>,
}
impl cainome::cairo_serde::CairoSerde for StoreUpdateMember {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.table);
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.entity_id);
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.member_selector);
        __size += Vec::<starknet::core::types::Felt>::cairo_serialized_size(&__rust.values);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(starknet::core::types::Felt::cairo_serialize(&__rust.table));
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.entity_id,
        ));
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.member_selector,
        ));
        __out.extend(Vec::<starknet::core::types::Felt>::cairo_serialize(
            &__rust.values,
        ));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let table = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&table);
        let entity_id = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&entity_id);
        let member_selector = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&member_selector);
        let values = Vec::<starknet::core::types::Felt>::cairo_deserialize(__felts, __offset)?;
        __offset += Vec::<starknet::core::types::Felt>::cairo_serialized_size(&values);
        Ok(StoreUpdateMember {
            table,
            entity_id,
            member_selector,
            values,
        })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct StoreUpdateRecord {
    pub table: starknet::core::types::Felt,
    pub entity_id: starknet::core::types::Felt,
    pub values: Vec<starknet::core::types::Felt>,
}
impl cainome::cairo_serde::CairoSerde for StoreUpdateRecord {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.table);
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.entity_id);
        __size += Vec::<starknet::core::types::Felt>::cairo_serialized_size(&__rust.values);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(starknet::core::types::Felt::cairo_serialize(&__rust.table));
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.entity_id,
        ));
        __out.extend(Vec::<starknet::core::types::Felt>::cairo_serialize(
            &__rust.values,
        ));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let table = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&table);
        let entity_id = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&entity_id);
        let values = Vec::<starknet::core::types::Felt>::cairo_deserialize(__felts, __offset)?;
        __offset += Vec::<starknet::core::types::Felt>::cairo_serialized_size(&values);
        Ok(StoreUpdateRecord {
            table,
            entity_id,
            values,
        })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct WorldSpawned {
    pub address: cainome::cairo_serde::ContractAddress,
    pub creator: cainome::cairo_serde::ContractAddress,
}
impl cainome::cairo_serde::CairoSerde for WorldSpawned {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&__rust.address);
        __size += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&__rust.creator);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            &__rust.address,
        ));
        __out.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            &__rust.creator,
        ));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let address = cainome::cairo_serde::ContractAddress::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&address);
        let creator = cainome::cairo_serde::ContractAddress::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&creator);
        Ok(WorldSpawned { address, creator })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct WorldUpgraded {
    pub class_hash: cainome::cairo_serde::ClassHash,
}
impl cainome::cairo_serde::CairoSerde for WorldUpgraded {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += cainome::cairo_serde::ClassHash::cairo_serialized_size(&__rust.class_hash);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(cainome::cairo_serde::ClassHash::cairo_serialize(
            &__rust.class_hash,
        ));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let class_hash = cainome::cairo_serde::ClassHash::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ClassHash::cairo_serialized_size(&class_hash);
        Ok(WorldUpgraded { class_hash })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub struct WriterUpdated {
    pub resource: starknet::core::types::Felt,
    pub contract: cainome::cairo_serde::ContractAddress,
    pub value: bool,
}
impl cainome::cairo_serde::CairoSerde for WriterUpdated {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.resource);
        __size += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&__rust.contract);
        __size += bool::cairo_serialized_size(&__rust.value);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.resource,
        ));
        __out.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            &__rust.contract,
        ));
        __out.extend(bool::cairo_serialize(&__rust.value));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let resource = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&resource);
        let contract = cainome::cairo_serde::ContractAddress::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&contract);
        let value = bool::cairo_deserialize(__felts, __offset)?;
        __offset += bool::cairo_serialized_size(&value);
        Ok(WriterUpdated {
            resource,
            contract,
            value,
        })
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub enum DojoConfigEvent {
    DifferProgramHashUpdate(DifferProgramHashUpdate),
    MergerProgramHashUpdate(MergerProgramHashUpdate),
    FactsRegistryUpdate(FactsRegistryUpdate),
}
impl cainome::cairo_serde::CairoSerde for DojoConfigEvent {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = std::option::Option::None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        match __rust {
            DojoConfigEvent::DifferProgramHashUpdate(val) => {
                DifferProgramHashUpdate::cairo_serialized_size(val) + 1
            }
            DojoConfigEvent::MergerProgramHashUpdate(val) => {
                MergerProgramHashUpdate::cairo_serialized_size(val) + 1
            }
            DojoConfigEvent::FactsRegistryUpdate(val) => {
                FactsRegistryUpdate::cairo_serialized_size(val) + 1
            }
            _ => 0,
        }
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        match __rust {
            DojoConfigEvent::DifferProgramHashUpdate(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&0usize));
                temp.extend(DifferProgramHashUpdate::cairo_serialize(val));
                temp
            }
            DojoConfigEvent::MergerProgramHashUpdate(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&1usize));
                temp.extend(MergerProgramHashUpdate::cairo_serialize(val));
                temp
            }
            DojoConfigEvent::FactsRegistryUpdate(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&2usize));
                temp.extend(FactsRegistryUpdate::cairo_serialize(val));
                temp
            }
            _ => vec![],
        }
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let __f = __felts[__offset];
        let __index = u128::from_be_bytes(__f.to_bytes_be()[16..].try_into().unwrap());
        match __index as usize {
            0usize => Ok(DojoConfigEvent::DifferProgramHashUpdate(
                DifferProgramHashUpdate::cairo_deserialize(__felts, __offset + 1)?,
            )),
            1usize => Ok(DojoConfigEvent::MergerProgramHashUpdate(
                MergerProgramHashUpdate::cairo_deserialize(__felts, __offset + 1)?,
            )),
            2usize => Ok(DojoConfigEvent::FactsRegistryUpdate(
                FactsRegistryUpdate::cairo_deserialize(__felts, __offset + 1)?,
            )),
            _ => {
                return Err(cainome::cairo_serde::Error::Deserialize(format!(
                    "Index not handle for enum {}",
                    "DojoConfigEvent"
                )));
            }
        }
    }
}
impl TryFrom<starknet::core::types::EmittedEvent> for DojoConfigEvent {
    type Error = String;
    fn try_from(event: starknet::core::types::EmittedEvent) -> Result<Self, Self::Error> {
        use cainome::cairo_serde::CairoSerde;
        if event.keys.is_empty() {
            return Err("Event has no key".to_string());
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("DifferProgramHashUpdate")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "DifferProgramHashUpdate"))
        {
            let mut key_offset = 0 + 1;
            let mut data_offset = 0;
            let program_hash =
                match starknet::core::types::Felt::cairo_deserialize(&event.data, data_offset) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "program_hash", "DifferProgramHashUpdate", e
                        ));
                    }
                };
            data_offset += starknet::core::types::Felt::cairo_serialized_size(&program_hash);
            return Ok(DojoConfigEvent::DifferProgramHashUpdate(
                DifferProgramHashUpdate { program_hash },
            ));
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("MergerProgramHashUpdate")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "MergerProgramHashUpdate"))
        {
            let mut key_offset = 0 + 1;
            let mut data_offset = 0;
            let program_hash =
                match starknet::core::types::Felt::cairo_deserialize(&event.data, data_offset) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "program_hash", "MergerProgramHashUpdate", e
                        ));
                    }
                };
            data_offset += starknet::core::types::Felt::cairo_serialized_size(&program_hash);
            return Ok(DojoConfigEvent::MergerProgramHashUpdate(
                MergerProgramHashUpdate { program_hash },
            ));
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("FactsRegistryUpdate")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "FactsRegistryUpdate"))
        {
            let mut key_offset = 0 + 1;
            let mut data_offset = 0;
            let address = match cainome::cairo_serde::ContractAddress::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "address", "FactsRegistryUpdate", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&address);
            return Ok(DojoConfigEvent::FactsRegistryUpdate(FactsRegistryUpdate {
                address,
            }));
        }
        Err(format!(
            "Could not match any event from keys {:?}",
            event.keys
        ))
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub enum Event {
    WorldSpawned(WorldSpawned),
    ContractDeployed(ContractDeployed),
    ContractUpgraded(ContractUpgraded),
    ContractInitialized(ContractInitialized),
    WorldUpgraded(WorldUpgraded),
    MetadataUpdate(MetadataUpdate),
    NamespaceRegistered(NamespaceRegistered),
    ModelRegistered(ModelRegistered),
    ModelUpgraded(ModelUpgraded),
    StoreSetRecord(StoreSetRecord),
    StoreUpdateRecord(StoreUpdateRecord),
    StoreUpdateMember(StoreUpdateMember),
    StoreDelRecord(StoreDelRecord),
    WriterUpdated(WriterUpdated),
    OwnerUpdated(OwnerUpdated),
    ConfigEvent(DojoConfigEvent),
    StateUpdated(StateUpdated),
}
impl cainome::cairo_serde::CairoSerde for Event {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = std::option::Option::None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        match __rust {
            Event::WorldSpawned(val) => WorldSpawned::cairo_serialized_size(val) + 1,
            Event::ContractDeployed(val) => ContractDeployed::cairo_serialized_size(val) + 1,
            Event::ContractUpgraded(val) => ContractUpgraded::cairo_serialized_size(val) + 1,
            Event::ContractInitialized(val) => ContractInitialized::cairo_serialized_size(val) + 1,
            Event::WorldUpgraded(val) => WorldUpgraded::cairo_serialized_size(val) + 1,
            Event::MetadataUpdate(val) => MetadataUpdate::cairo_serialized_size(val) + 1,
            Event::NamespaceRegistered(val) => NamespaceRegistered::cairo_serialized_size(val) + 1,
            Event::ModelRegistered(val) => ModelRegistered::cairo_serialized_size(val) + 1,
            Event::ModelUpgraded(val) => ModelUpgraded::cairo_serialized_size(val) + 1,
            Event::StoreSetRecord(val) => StoreSetRecord::cairo_serialized_size(val) + 1,
            Event::StoreUpdateRecord(val) => StoreUpdateRecord::cairo_serialized_size(val) + 1,
            Event::StoreUpdateMember(val) => StoreUpdateMember::cairo_serialized_size(val) + 1,
            Event::StoreDelRecord(val) => StoreDelRecord::cairo_serialized_size(val) + 1,
            Event::WriterUpdated(val) => WriterUpdated::cairo_serialized_size(val) + 1,
            Event::OwnerUpdated(val) => OwnerUpdated::cairo_serialized_size(val) + 1,
            Event::ConfigEvent(val) => DojoConfigEvent::cairo_serialized_size(val) + 1,
            Event::StateUpdated(val) => StateUpdated::cairo_serialized_size(val) + 1,
            _ => 0,
        }
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        match __rust {
            Event::WorldSpawned(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&0usize));
                temp.extend(WorldSpawned::cairo_serialize(val));
                temp
            }
            Event::ContractDeployed(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&1usize));
                temp.extend(ContractDeployed::cairo_serialize(val));
                temp
            }
            Event::ContractUpgraded(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&2usize));
                temp.extend(ContractUpgraded::cairo_serialize(val));
                temp
            }
            Event::ContractInitialized(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&3usize));
                temp.extend(ContractInitialized::cairo_serialize(val));
                temp
            }
            Event::WorldUpgraded(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&4usize));
                temp.extend(WorldUpgraded::cairo_serialize(val));
                temp
            }
            Event::MetadataUpdate(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&5usize));
                temp.extend(MetadataUpdate::cairo_serialize(val));
                temp
            }
            Event::NamespaceRegistered(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&6usize));
                temp.extend(NamespaceRegistered::cairo_serialize(val));
                temp
            }
            Event::ModelRegistered(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&7usize));
                temp.extend(ModelRegistered::cairo_serialize(val));
                temp
            }
            Event::ModelUpgraded(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&8usize));
                temp.extend(ModelUpgraded::cairo_serialize(val));
                temp
            }
            Event::StoreSetRecord(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&9usize));
                temp.extend(StoreSetRecord::cairo_serialize(val));
                temp
            }
            Event::StoreUpdateRecord(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&10usize));
                temp.extend(StoreUpdateRecord::cairo_serialize(val));
                temp
            }
            Event::StoreUpdateMember(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&11usize));
                temp.extend(StoreUpdateMember::cairo_serialize(val));
                temp
            }
            Event::StoreDelRecord(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&12usize));
                temp.extend(StoreDelRecord::cairo_serialize(val));
                temp
            }
            Event::WriterUpdated(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&13usize));
                temp.extend(WriterUpdated::cairo_serialize(val));
                temp
            }
            Event::OwnerUpdated(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&14usize));
                temp.extend(OwnerUpdated::cairo_serialize(val));
                temp
            }
            Event::ConfigEvent(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&15usize));
                temp.extend(DojoConfigEvent::cairo_serialize(val));
                temp
            }
            Event::StateUpdated(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&16usize));
                temp.extend(StateUpdated::cairo_serialize(val));
                temp
            }
            _ => vec![],
        }
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let __f = __felts[__offset];
        let __index = u128::from_be_bytes(__f.to_bytes_be()[16..].try_into().unwrap());
        match __index as usize {
            0usize => Ok(Event::WorldSpawned(WorldSpawned::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            1usize => Ok(Event::ContractDeployed(
                ContractDeployed::cairo_deserialize(__felts, __offset + 1)?,
            )),
            2usize => Ok(Event::ContractUpgraded(
                ContractUpgraded::cairo_deserialize(__felts, __offset + 1)?,
            )),
            3usize => Ok(Event::ContractInitialized(
                ContractInitialized::cairo_deserialize(__felts, __offset + 1)?,
            )),
            4usize => Ok(Event::WorldUpgraded(WorldUpgraded::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            5usize => Ok(Event::MetadataUpdate(MetadataUpdate::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            6usize => Ok(Event::NamespaceRegistered(
                NamespaceRegistered::cairo_deserialize(__felts, __offset + 1)?,
            )),
            7usize => Ok(Event::ModelRegistered(ModelRegistered::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            8usize => Ok(Event::ModelUpgraded(ModelUpgraded::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            9usize => Ok(Event::StoreSetRecord(StoreSetRecord::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            10usize => Ok(Event::StoreUpdateRecord(
                StoreUpdateRecord::cairo_deserialize(__felts, __offset + 1)?,
            )),
            11usize => Ok(Event::StoreUpdateMember(
                StoreUpdateMember::cairo_deserialize(__felts, __offset + 1)?,
            )),
            12usize => Ok(Event::StoreDelRecord(StoreDelRecord::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            13usize => Ok(Event::WriterUpdated(WriterUpdated::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            14usize => Ok(Event::OwnerUpdated(OwnerUpdated::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            15usize => Ok(Event::ConfigEvent(DojoConfigEvent::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            16usize => Ok(Event::StateUpdated(StateUpdated::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            _ => {
                return Err(cainome::cairo_serde::Error::Deserialize(format!(
                    "Index not handle for enum {}",
                    "Event"
                )));
            }
        }
    }
}
impl TryFrom<starknet::core::types::EmittedEvent> for Event {
    type Error = String;
    fn try_from(event: starknet::core::types::EmittedEvent) -> Result<Self, Self::Error> {
        use cainome::cairo_serde::CairoSerde;
        if event.keys.is_empty() {
            return Err("Event has no key".to_string());
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("WorldSpawned")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "WorldSpawned"))
        {
            let mut key_offset = 0 + 1;
            let mut data_offset = 0;
            let address = match cainome::cairo_serde::ContractAddress::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "address", "WorldSpawned", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&address);
            let creator = match cainome::cairo_serde::ContractAddress::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "creator", "WorldSpawned", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&creator);
            return Ok(Event::WorldSpawned(WorldSpawned { address, creator }));
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("ContractDeployed")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "ContractDeployed"))
        {
            let mut key_offset = 0 + 1;
            let mut data_offset = 0;
            let salt =
                match starknet::core::types::Felt::cairo_deserialize(&event.data, data_offset) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "salt", "ContractDeployed", e
                        ));
                    }
                };
            data_offset += starknet::core::types::Felt::cairo_serialized_size(&salt);
            let class_hash = match cainome::cairo_serde::ClassHash::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "class_hash", "ContractDeployed", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ClassHash::cairo_serialized_size(&class_hash);
            let address = match cainome::cairo_serde::ContractAddress::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "address", "ContractDeployed", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&address);
            let namespace = match cainome::cairo_serde::ByteArray::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "namespace", "ContractDeployed", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ByteArray::cairo_serialized_size(&namespace);
            let name = match cainome::cairo_serde::ByteArray::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "name", "ContractDeployed", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ByteArray::cairo_serialized_size(&name);
            return Ok(Event::ContractDeployed(ContractDeployed {
                salt,
                class_hash,
                address,
                namespace,
                name,
            }));
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("ContractUpgraded")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "ContractUpgraded"))
        {
            let mut key_offset = 0 + 1;
            let mut data_offset = 0;
            let class_hash = match cainome::cairo_serde::ClassHash::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "class_hash", "ContractUpgraded", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ClassHash::cairo_serialized_size(&class_hash);
            let address = match cainome::cairo_serde::ContractAddress::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "address", "ContractUpgraded", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&address);
            return Ok(Event::ContractUpgraded(ContractUpgraded {
                class_hash,
                address,
            }));
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("ContractInitialized")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "ContractInitialized"))
        {
            let mut key_offset = 0 + 1;
            let mut data_offset = 0;
            let selector =
                match starknet::core::types::Felt::cairo_deserialize(&event.data, data_offset) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "selector", "ContractInitialized", e
                        ));
                    }
                };
            data_offset += starknet::core::types::Felt::cairo_serialized_size(&selector);
            let init_calldata = match Vec::<starknet::core::types::Felt>::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "init_calldata", "ContractInitialized", e
                    ));
                }
            };
            data_offset +=
                Vec::<starknet::core::types::Felt>::cairo_serialized_size(&init_calldata);
            return Ok(Event::ContractInitialized(ContractInitialized {
                selector,
                init_calldata,
            }));
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("WorldUpgraded")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "WorldUpgraded"))
        {
            let mut key_offset = 0 + 1;
            let mut data_offset = 0;
            let class_hash = match cainome::cairo_serde::ClassHash::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "class_hash", "WorldUpgraded", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ClassHash::cairo_serialized_size(&class_hash);
            return Ok(Event::WorldUpgraded(WorldUpgraded { class_hash }));
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("MetadataUpdate")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "MetadataUpdate"))
        {
            let mut key_offset = 0 + 1;
            let mut data_offset = 0;
            let resource =
                match starknet::core::types::Felt::cairo_deserialize(&event.data, data_offset) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "resource", "MetadataUpdate", e
                        ));
                    }
                };
            data_offset += starknet::core::types::Felt::cairo_serialized_size(&resource);
            let uri = match cainome::cairo_serde::ByteArray::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "uri", "MetadataUpdate", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ByteArray::cairo_serialized_size(&uri);
            return Ok(Event::MetadataUpdate(MetadataUpdate { resource, uri }));
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("NamespaceRegistered")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "NamespaceRegistered"))
        {
            let mut key_offset = 0 + 1;
            let mut data_offset = 0;
            let namespace = match cainome::cairo_serde::ByteArray::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "namespace", "NamespaceRegistered", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ByteArray::cairo_serialized_size(&namespace);
            let hash =
                match starknet::core::types::Felt::cairo_deserialize(&event.data, data_offset) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "hash", "NamespaceRegistered", e
                        ));
                    }
                };
            data_offset += starknet::core::types::Felt::cairo_serialized_size(&hash);
            return Ok(Event::NamespaceRegistered(NamespaceRegistered {
                namespace,
                hash,
            }));
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("ModelRegistered")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "ModelRegistered"))
        {
            let mut key_offset = 0 + 1;
            let mut data_offset = 0;
            let name = match cainome::cairo_serde::ByteArray::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "name", "ModelRegistered", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ByteArray::cairo_serialized_size(&name);
            let namespace = match cainome::cairo_serde::ByteArray::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "namespace", "ModelRegistered", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ByteArray::cairo_serialized_size(&namespace);
            let class_hash = match cainome::cairo_serde::ClassHash::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "class_hash", "ModelRegistered", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ClassHash::cairo_serialized_size(&class_hash);
            let address = match cainome::cairo_serde::ContractAddress::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "address", "ModelRegistered", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&address);
            return Ok(Event::ModelRegistered(ModelRegistered {
                name,
                namespace,
                class_hash,
                address,
            }));
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("ModelUpgraded")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "ModelUpgraded"))
        {
            let mut key_offset = 0 + 1;
            let mut data_offset = 0;
            let name = match cainome::cairo_serde::ByteArray::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "name", "ModelUpgraded", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ByteArray::cairo_serialized_size(&name);
            let namespace = match cainome::cairo_serde::ByteArray::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "namespace", "ModelUpgraded", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ByteArray::cairo_serialized_size(&namespace);
            let class_hash = match cainome::cairo_serde::ClassHash::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "class_hash", "ModelUpgraded", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ClassHash::cairo_serialized_size(&class_hash);
            let prev_class_hash = match cainome::cairo_serde::ClassHash::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "prev_class_hash", "ModelUpgraded", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ClassHash::cairo_serialized_size(&prev_class_hash);
            let address = match cainome::cairo_serde::ContractAddress::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "address", "ModelUpgraded", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&address);
            let prev_address = match cainome::cairo_serde::ContractAddress::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "prev_address", "ModelUpgraded", e
                    ));
                }
            };
            data_offset +=
                cainome::cairo_serde::ContractAddress::cairo_serialized_size(&prev_address);
            return Ok(Event::ModelUpgraded(ModelUpgraded {
                name,
                namespace,
                class_hash,
                prev_class_hash,
                address,
                prev_address,
            }));
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("StoreSetRecord")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "StoreSetRecord"))
        {
            let mut key_offset = 0 + 1;
            let mut data_offset = 0;
            let table =
                match starknet::core::types::Felt::cairo_deserialize(&event.data, data_offset) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "table", "StoreSetRecord", e
                        ));
                    }
                };
            data_offset += starknet::core::types::Felt::cairo_serialized_size(&table);
            let entity_id =
                match starknet::core::types::Felt::cairo_deserialize(&event.data, data_offset) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "entity_id", "StoreSetRecord", e
                        ));
                    }
                };
            data_offset += starknet::core::types::Felt::cairo_serialized_size(&entity_id);
            let keys = match Vec::<starknet::core::types::Felt>::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "keys", "StoreSetRecord", e
                    ));
                }
            };
            data_offset += Vec::<starknet::core::types::Felt>::cairo_serialized_size(&keys);
            let values = match Vec::<starknet::core::types::Felt>::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "values", "StoreSetRecord", e
                    ));
                }
            };
            data_offset += Vec::<starknet::core::types::Felt>::cairo_serialized_size(&values);
            return Ok(Event::StoreSetRecord(StoreSetRecord {
                table,
                entity_id,
                keys,
                values,
            }));
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("StoreUpdateRecord")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "StoreUpdateRecord"))
        {
            let mut key_offset = 0 + 1;
            let mut data_offset = 0;
            let table =
                match starknet::core::types::Felt::cairo_deserialize(&event.data, data_offset) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "table", "StoreUpdateRecord", e
                        ));
                    }
                };
            data_offset += starknet::core::types::Felt::cairo_serialized_size(&table);
            let entity_id =
                match starknet::core::types::Felt::cairo_deserialize(&event.data, data_offset) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "entity_id", "StoreUpdateRecord", e
                        ));
                    }
                };
            data_offset += starknet::core::types::Felt::cairo_serialized_size(&entity_id);
            let values = match Vec::<starknet::core::types::Felt>::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "values", "StoreUpdateRecord", e
                    ));
                }
            };
            data_offset += Vec::<starknet::core::types::Felt>::cairo_serialized_size(&values);
            return Ok(Event::StoreUpdateRecord(StoreUpdateRecord {
                table,
                entity_id,
                values,
            }));
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("StoreUpdateMember")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "StoreUpdateMember"))
        {
            let mut key_offset = 0 + 1;
            let mut data_offset = 0;
            let table =
                match starknet::core::types::Felt::cairo_deserialize(&event.data, data_offset) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "table", "StoreUpdateMember", e
                        ));
                    }
                };
            data_offset += starknet::core::types::Felt::cairo_serialized_size(&table);
            let entity_id =
                match starknet::core::types::Felt::cairo_deserialize(&event.data, data_offset) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "entity_id", "StoreUpdateMember", e
                        ));
                    }
                };
            data_offset += starknet::core::types::Felt::cairo_serialized_size(&entity_id);
            let member_selector =
                match starknet::core::types::Felt::cairo_deserialize(&event.data, data_offset) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "member_selector", "StoreUpdateMember", e
                        ));
                    }
                };
            data_offset += starknet::core::types::Felt::cairo_serialized_size(&member_selector);
            let values = match Vec::<starknet::core::types::Felt>::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "values", "StoreUpdateMember", e
                    ));
                }
            };
            data_offset += Vec::<starknet::core::types::Felt>::cairo_serialized_size(&values);
            return Ok(Event::StoreUpdateMember(StoreUpdateMember {
                table,
                entity_id,
                member_selector,
                values,
            }));
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("StoreDelRecord")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "StoreDelRecord"))
        {
            let mut key_offset = 0 + 1;
            let mut data_offset = 0;
            let table =
                match starknet::core::types::Felt::cairo_deserialize(&event.data, data_offset) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "table", "StoreDelRecord", e
                        ));
                    }
                };
            data_offset += starknet::core::types::Felt::cairo_serialized_size(&table);
            let entity_id =
                match starknet::core::types::Felt::cairo_deserialize(&event.data, data_offset) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "entity_id", "StoreDelRecord", e
                        ));
                    }
                };
            data_offset += starknet::core::types::Felt::cairo_serialized_size(&entity_id);
            return Ok(Event::StoreDelRecord(StoreDelRecord { table, entity_id }));
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("WriterUpdated")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "WriterUpdated"))
        {
            let mut key_offset = 0 + 1;
            let mut data_offset = 0;
            let resource =
                match starknet::core::types::Felt::cairo_deserialize(&event.data, data_offset) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "resource", "WriterUpdated", e
                        ));
                    }
                };
            data_offset += starknet::core::types::Felt::cairo_serialized_size(&resource);
            let contract = match cainome::cairo_serde::ContractAddress::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "contract", "WriterUpdated", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&contract);
            let value = match bool::cairo_deserialize(&event.data, data_offset) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "value", "WriterUpdated", e
                    ));
                }
            };
            data_offset += bool::cairo_serialized_size(&value);
            return Ok(Event::WriterUpdated(WriterUpdated {
                resource,
                contract,
                value,
            }));
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("OwnerUpdated")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "OwnerUpdated"))
        {
            let mut key_offset = 0 + 1;
            let mut data_offset = 0;
            let address = match cainome::cairo_serde::ContractAddress::cairo_deserialize(
                &event.data,
                data_offset,
            ) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "address", "OwnerUpdated", e
                    ));
                }
            };
            data_offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&address);
            let resource =
                match starknet::core::types::Felt::cairo_deserialize(&event.data, data_offset) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "resource", "OwnerUpdated", e
                        ));
                    }
                };
            data_offset += starknet::core::types::Felt::cairo_serialized_size(&resource);
            let value = match bool::cairo_deserialize(&event.data, data_offset) {
                Ok(v) => v,
                Err(e) => {
                    return Err(format!(
                        "Could not deserialize field {} for {}: {:?}",
                        "value", "OwnerUpdated", e
                    ));
                }
            };
            data_offset += bool::cairo_serialized_size(&value);
            return Ok(Event::OwnerUpdated(OwnerUpdated {
                address,
                resource,
                value,
            }));
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("ConfigEvent")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "ConfigEvent"))
        {
            let selector = event.keys[1];
            if selector
                == starknet::core::utils::get_selector_from_name("DifferProgramHashUpdate")
                    .unwrap_or_else(|_| {
                        panic!("Invalid selector for {}", "DifferProgramHashUpdate")
                    })
            {
                let mut key_offset = 1 + 1;
                let mut data_offset = 0;
                let program_hash = match starknet::core::types::Felt::cairo_deserialize(
                    &event.data,
                    data_offset,
                ) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "program_hash", "DifferProgramHashUpdate", e
                        ));
                    }
                };
                data_offset += starknet::core::types::Felt::cairo_serialized_size(&program_hash);
                return Ok(Event::ConfigEvent(
                    DojoConfigEvent::DifferProgramHashUpdate(DifferProgramHashUpdate {
                        program_hash,
                    }),
                ));
            }
            let selector = event.keys[1];
            if selector
                == starknet::core::utils::get_selector_from_name("MergerProgramHashUpdate")
                    .unwrap_or_else(|_| {
                        panic!("Invalid selector for {}", "MergerProgramHashUpdate")
                    })
            {
                let mut key_offset = 1 + 1;
                let mut data_offset = 0;
                let program_hash = match starknet::core::types::Felt::cairo_deserialize(
                    &event.data,
                    data_offset,
                ) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "program_hash", "MergerProgramHashUpdate", e
                        ));
                    }
                };
                data_offset += starknet::core::types::Felt::cairo_serialized_size(&program_hash);
                return Ok(Event::ConfigEvent(
                    DojoConfigEvent::MergerProgramHashUpdate(MergerProgramHashUpdate {
                        program_hash,
                    }),
                ));
            }
            let selector = event.keys[1];
            if selector
                == starknet::core::utils::get_selector_from_name("FactsRegistryUpdate")
                    .unwrap_or_else(|_| panic!("Invalid selector for {}", "FactsRegistryUpdate"))
            {
                let mut key_offset = 1 + 1;
                let mut data_offset = 0;
                let address = match cainome::cairo_serde::ContractAddress::cairo_deserialize(
                    &event.data,
                    data_offset,
                ) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "address", "FactsRegistryUpdate", e
                        ));
                    }
                };
                data_offset +=
                    cainome::cairo_serde::ContractAddress::cairo_serialized_size(&address);
                return Ok(Event::ConfigEvent(DojoConfigEvent::FactsRegistryUpdate(
                    FactsRegistryUpdate { address },
                )));
            }
        }
        let selector = event.keys[0];
        if selector
            == starknet::core::utils::get_selector_from_name("StateUpdated")
                .unwrap_or_else(|_| panic!("Invalid selector for {}", "StateUpdated"))
        {
            let mut key_offset = 0 + 1;
            let mut data_offset = 0;
            let da_hash =
                match starknet::core::types::Felt::cairo_deserialize(&event.data, data_offset) {
                    Ok(v) => v,
                    Err(e) => {
                        return Err(format!(
                            "Could not deserialize field {} for {}: {:?}",
                            "da_hash", "StateUpdated", e
                        ));
                    }
                };
            data_offset += starknet::core::types::Felt::cairo_serialized_size(&da_hash);
            return Ok(Event::StateUpdated(StateUpdated { da_hash }));
        }
        Err(format!(
            "Could not match any event from keys {:?}",
            event.keys
        ))
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub enum Layout {
    Fixed(Vec<u8>),
    Struct(Vec<FieldLayout>),
    Tuple(Vec<Layout>),
    Array(Vec<Layout>),
    ByteArray,
    Enum(Vec<FieldLayout>),
}
impl cainome::cairo_serde::CairoSerde for Layout {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = std::option::Option::None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        match __rust {
            Layout::Fixed(val) => Vec::<u8>::cairo_serialized_size(val) + 1,
            Layout::Struct(val) => Vec::<FieldLayout>::cairo_serialized_size(val) + 1,
            Layout::Tuple(val) => Vec::<Layout>::cairo_serialized_size(val) + 1,
            Layout::Array(val) => Vec::<Layout>::cairo_serialized_size(val) + 1,
            Layout::ByteArray => 1,
            Layout::Enum(val) => Vec::<FieldLayout>::cairo_serialized_size(val) + 1,
            _ => 0,
        }
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        match __rust {
            Layout::Fixed(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&0usize));
                temp.extend(Vec::<u8>::cairo_serialize(val));
                temp
            }
            Layout::Struct(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&1usize));
                temp.extend(Vec::<FieldLayout>::cairo_serialize(val));
                temp
            }
            Layout::Tuple(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&2usize));
                temp.extend(Vec::<Layout>::cairo_serialize(val));
                temp
            }
            Layout::Array(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&3usize));
                temp.extend(Vec::<Layout>::cairo_serialize(val));
                temp
            }
            Layout::ByteArray => usize::cairo_serialize(&4usize),
            Layout::Enum(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&5usize));
                temp.extend(Vec::<FieldLayout>::cairo_serialize(val));
                temp
            }
            _ => vec![],
        }
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let __f = __felts[__offset];
        let __index = u128::from_be_bytes(__f.to_bytes_be()[16..].try_into().unwrap());
        match __index as usize {
            0usize => Ok(Layout::Fixed(Vec::<u8>::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            1usize => Ok(Layout::Struct(Vec::<FieldLayout>::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            2usize => Ok(Layout::Tuple(Vec::<Layout>::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            3usize => Ok(Layout::Array(Vec::<Layout>::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            4usize => Ok(Layout::ByteArray),
            5usize => Ok(Layout::Enum(Vec::<FieldLayout>::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            _ => {
                return Err(cainome::cairo_serde::Error::Deserialize(format!(
                    "Index not handle for enum {}",
                    "Layout"
                )));
            }
        }
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub enum ModelIndex {
    Keys(Vec<starknet::core::types::Felt>),
    Id(starknet::core::types::Felt),
    MemberId((starknet::core::types::Felt, starknet::core::types::Felt)),
}
impl cainome::cairo_serde::CairoSerde for ModelIndex {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = std::option::Option::None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        match __rust {
            ModelIndex::Keys(val) => {
                Vec::<starknet::core::types::Felt>::cairo_serialized_size(val) + 1
            }
            ModelIndex::Id(val) => starknet::core::types::Felt::cairo_serialized_size(val) + 1,
            ModelIndex::MemberId(val) => {
                <(starknet::core::types::Felt, starknet::core::types::Felt)>::cairo_serialized_size(
                    val,
                ) + 1
            }
            _ => 0,
        }
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        match __rust {
            ModelIndex::Keys(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&0usize));
                temp.extend(Vec::<starknet::core::types::Felt>::cairo_serialize(val));
                temp
            }
            ModelIndex::Id(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&1usize));
                temp.extend(starknet::core::types::Felt::cairo_serialize(val));
                temp
            }
            ModelIndex::MemberId(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&2usize));
                temp.extend(
                    <(starknet::core::types::Felt, starknet::core::types::Felt)>::cairo_serialize(
                        val,
                    ),
                );
                temp
            }
            _ => vec![],
        }
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let __f = __felts[__offset];
        let __index = u128::from_be_bytes(__f.to_bytes_be()[16..].try_into().unwrap());
        match __index as usize {
            0usize => Ok(ModelIndex::Keys(
                Vec::<starknet::core::types::Felt>::cairo_deserialize(__felts, __offset + 1)?,
            )),
            1usize => Ok(ModelIndex::Id(
                starknet::core::types::Felt::cairo_deserialize(__felts, __offset + 1)?,
            )),
            2usize => Ok(ModelIndex::MemberId(<(
                starknet::core::types::Felt,
                starknet::core::types::Felt,
            )>::cairo_deserialize(
                __felts, __offset + 1
            )?)),
            _ => {
                return Err(cainome::cairo_serde::Error::Deserialize(format!(
                    "Index not handle for enum {}",
                    "ModelIndex"
                )));
            }
        }
    }
}
#[derive(Clone, serde::Serialize, serde::Deserialize, PartialEq, Debug)]
pub enum Resource {
    Model(
        (
            cainome::cairo_serde::ClassHash,
            cainome::cairo_serde::ContractAddress,
        ),
    ),
    Contract(
        (
            cainome::cairo_serde::ClassHash,
            cainome::cairo_serde::ContractAddress,
        ),
    ),
    Namespace,
    World,
    Unregistered,
}
impl cainome::cairo_serde::CairoSerde for Resource {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = std::option::Option::None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        match __rust {
            Resource::Model(val) => {
                <(
                    cainome::cairo_serde::ClassHash,
                    cainome::cairo_serde::ContractAddress,
                )>::cairo_serialized_size(val)
                    + 1
            }
            Resource::Contract(val) => {
                <(
                    cainome::cairo_serde::ClassHash,
                    cainome::cairo_serde::ContractAddress,
                )>::cairo_serialized_size(val)
                    + 1
            }
            Resource::Namespace => 1,
            Resource::World => 1,
            Resource::Unregistered => 1,
            _ => 0,
        }
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        match __rust {
            Resource::Model(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&0usize));
                temp.extend(<(
                    cainome::cairo_serde::ClassHash,
                    cainome::cairo_serde::ContractAddress,
                )>::cairo_serialize(val));
                temp
            }
            Resource::Contract(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&1usize));
                temp.extend(<(
                    cainome::cairo_serde::ClassHash,
                    cainome::cairo_serde::ContractAddress,
                )>::cairo_serialize(val));
                temp
            }
            Resource::Namespace => usize::cairo_serialize(&2usize),
            Resource::World => usize::cairo_serialize(&3usize),
            Resource::Unregistered => usize::cairo_serialize(&4usize),
            _ => vec![],
        }
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let __f = __felts[__offset];
        let __index = u128::from_be_bytes(__f.to_bytes_be()[16..].try_into().unwrap());
        match __index as usize {
            0usize => Ok(Resource::Model(<(
                cainome::cairo_serde::ClassHash,
                cainome::cairo_serde::ContractAddress,
            )>::cairo_deserialize(
                __felts, __offset + 1
            )?)),
            1usize => Ok(Resource::Contract(<(
                cainome::cairo_serde::ClassHash,
                cainome::cairo_serde::ContractAddress,
            )>::cairo_deserialize(
                __felts, __offset + 1
            )?)),
            2usize => Ok(Resource::Namespace),
            3usize => Ok(Resource::World),
            4usize => Ok(Resource::Unregistered),
            _ => {
                return Err(cainome::cairo_serde::Error::Deserialize(format!(
                    "Index not handle for enum {}",
                    "Resource"
                )));
            }
        }
    }
}
impl<A: starknet::accounts::ConnectedAccount + Sync> WorldContract<A> {
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn base(
        &self,
    ) -> cainome::cairo_serde::call::FCall<A::Provider, cainome::cairo_serde::ClassHash> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("base"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn emit(
        &self,
        keys: &Vec<starknet::core::types::Felt>,
        values: &Vec<starknet::core::types::Felt>,
    ) -> cainome::cairo_serde::call::FCall<A::Provider, ()> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(Vec::<starknet::core::types::Felt>::cairo_serialize(keys));
        __calldata.extend(Vec::<starknet::core::types::Felt>::cairo_serialize(values));
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("emit"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn entity(
        &self,
        model_selector: &starknet::core::types::Felt,
        index: &ModelIndex,
        layout: &Layout,
    ) -> cainome::cairo_serde::call::FCall<A::Provider, Vec<starknet::core::types::Felt>> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(model_selector));
        __calldata.extend(ModelIndex::cairo_serialize(index));
        __calldata.extend(Layout::cairo_serialize(layout));
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("entity"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn get_differ_program_hash(
        &self,
    ) -> cainome::cairo_serde::call::FCall<A::Provider, starknet::core::types::Felt> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("get_differ_program_hash"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn get_facts_registry(
        &self,
    ) -> cainome::cairo_serde::call::FCall<A::Provider, cainome::cairo_serde::ContractAddress> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("get_facts_registry"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn get_merger_program_hash(
        &self,
    ) -> cainome::cairo_serde::call::FCall<A::Provider, starknet::core::types::Felt> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("get_merger_program_hash"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn is_owner(
        &self,
        resource: &starknet::core::types::Felt,
        address: &cainome::cairo_serde::ContractAddress,
    ) -> cainome::cairo_serde::call::FCall<A::Provider, bool> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(resource));
        __calldata.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            address,
        ));
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("is_owner"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn is_writer(
        &self,
        resource: &starknet::core::types::Felt,
        contract: &cainome::cairo_serde::ContractAddress,
    ) -> cainome::cairo_serde::call::FCall<A::Provider, bool> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(resource));
        __calldata.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            contract,
        ));
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("is_writer"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn metadata(
        &self,
        resource_selector: &starknet::core::types::Felt,
    ) -> cainome::cairo_serde::call::FCall<A::Provider, ResourceMetadata> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(
            resource_selector,
        ));
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("metadata"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn resource(
        &self,
        selector: &starknet::core::types::Felt,
    ) -> cainome::cairo_serde::call::FCall<A::Provider, Resource> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(selector));
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("resource"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn delete_entity_getcall(
        &self,
        model_selector: &starknet::core::types::Felt,
        index: &ModelIndex,
        layout: &Layout,
    ) -> starknet::core::types::Call {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(model_selector));
        __calldata.extend(ModelIndex::cairo_serialize(index));
        __calldata.extend(Layout::cairo_serialize(layout));
        starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("delete_entity"),
            calldata: __calldata,
        }
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn delete_entity(
        &self,
        model_selector: &starknet::core::types::Felt,
        index: &ModelIndex,
        layout: &Layout,
    ) -> starknet::accounts::ExecutionV1<A> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(model_selector));
        __calldata.extend(ModelIndex::cairo_serialize(index));
        __calldata.extend(Layout::cairo_serialize(layout));
        let __call = starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("delete_entity"),
            calldata: __calldata,
        };
        self.account.execute_v1(vec![__call])
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn deploy_contract_getcall(
        &self,
        salt: &starknet::core::types::Felt,
        class_hash: &cainome::cairo_serde::ClassHash,
    ) -> starknet::core::types::Call {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(salt));
        __calldata.extend(cainome::cairo_serde::ClassHash::cairo_serialize(class_hash));
        starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("deploy_contract"),
            calldata: __calldata,
        }
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn deploy_contract(
        &self,
        salt: &starknet::core::types::Felt,
        class_hash: &cainome::cairo_serde::ClassHash,
    ) -> starknet::accounts::ExecutionV1<A> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(salt));
        __calldata.extend(cainome::cairo_serde::ClassHash::cairo_serialize(class_hash));
        let __call = starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("deploy_contract"),
            calldata: __calldata,
        };
        self.account.execute_v1(vec![__call])
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn grant_owner_getcall(
        &self,
        resource: &starknet::core::types::Felt,
        address: &cainome::cairo_serde::ContractAddress,
    ) -> starknet::core::types::Call {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(resource));
        __calldata.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            address,
        ));
        starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("grant_owner"),
            calldata: __calldata,
        }
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn grant_owner(
        &self,
        resource: &starknet::core::types::Felt,
        address: &cainome::cairo_serde::ContractAddress,
    ) -> starknet::accounts::ExecutionV1<A> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(resource));
        __calldata.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            address,
        ));
        let __call = starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("grant_owner"),
            calldata: __calldata,
        };
        self.account.execute_v1(vec![__call])
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn grant_writer_getcall(
        &self,
        resource: &starknet::core::types::Felt,
        contract: &cainome::cairo_serde::ContractAddress,
    ) -> starknet::core::types::Call {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(resource));
        __calldata.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            contract,
        ));
        starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("grant_writer"),
            calldata: __calldata,
        }
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn grant_writer(
        &self,
        resource: &starknet::core::types::Felt,
        contract: &cainome::cairo_serde::ContractAddress,
    ) -> starknet::accounts::ExecutionV1<A> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(resource));
        __calldata.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            contract,
        ));
        let __call = starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("grant_writer"),
            calldata: __calldata,
        };
        self.account.execute_v1(vec![__call])
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn init_contract_getcall(
        &self,
        selector: &starknet::core::types::Felt,
        init_calldata: &Vec<starknet::core::types::Felt>,
    ) -> starknet::core::types::Call {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(selector));
        __calldata.extend(Vec::<starknet::core::types::Felt>::cairo_serialize(
            init_calldata,
        ));
        starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("init_contract"),
            calldata: __calldata,
        }
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn init_contract(
        &self,
        selector: &starknet::core::types::Felt,
        init_calldata: &Vec<starknet::core::types::Felt>,
    ) -> starknet::accounts::ExecutionV1<A> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(selector));
        __calldata.extend(Vec::<starknet::core::types::Felt>::cairo_serialize(
            init_calldata,
        ));
        let __call = starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("init_contract"),
            calldata: __calldata,
        };
        self.account.execute_v1(vec![__call])
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn register_model_getcall(
        &self,
        class_hash: &cainome::cairo_serde::ClassHash,
    ) -> starknet::core::types::Call {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(cainome::cairo_serde::ClassHash::cairo_serialize(class_hash));
        starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("register_model"),
            calldata: __calldata,
        }
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn register_model(
        &self,
        class_hash: &cainome::cairo_serde::ClassHash,
    ) -> starknet::accounts::ExecutionV1<A> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(cainome::cairo_serde::ClassHash::cairo_serialize(class_hash));
        let __call = starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("register_model"),
            calldata: __calldata,
        };
        self.account.execute_v1(vec![__call])
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn register_namespace_getcall(
        &self,
        namespace: &cainome::cairo_serde::ByteArray,
    ) -> starknet::core::types::Call {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(cainome::cairo_serde::ByteArray::cairo_serialize(namespace));
        starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("register_namespace"),
            calldata: __calldata,
        }
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn register_namespace(
        &self,
        namespace: &cainome::cairo_serde::ByteArray,
    ) -> starknet::accounts::ExecutionV1<A> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(cainome::cairo_serde::ByteArray::cairo_serialize(namespace));
        let __call = starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("register_namespace"),
            calldata: __calldata,
        };
        self.account.execute_v1(vec![__call])
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn revoke_owner_getcall(
        &self,
        resource: &starknet::core::types::Felt,
        address: &cainome::cairo_serde::ContractAddress,
    ) -> starknet::core::types::Call {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(resource));
        __calldata.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            address,
        ));
        starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("revoke_owner"),
            calldata: __calldata,
        }
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn revoke_owner(
        &self,
        resource: &starknet::core::types::Felt,
        address: &cainome::cairo_serde::ContractAddress,
    ) -> starknet::accounts::ExecutionV1<A> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(resource));
        __calldata.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            address,
        ));
        let __call = starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("revoke_owner"),
            calldata: __calldata,
        };
        self.account.execute_v1(vec![__call])
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn revoke_writer_getcall(
        &self,
        resource: &starknet::core::types::Felt,
        contract: &cainome::cairo_serde::ContractAddress,
    ) -> starknet::core::types::Call {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(resource));
        __calldata.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            contract,
        ));
        starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("revoke_writer"),
            calldata: __calldata,
        }
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn revoke_writer(
        &self,
        resource: &starknet::core::types::Felt,
        contract: &cainome::cairo_serde::ContractAddress,
    ) -> starknet::accounts::ExecutionV1<A> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(resource));
        __calldata.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            contract,
        ));
        let __call = starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("revoke_writer"),
            calldata: __calldata,
        };
        self.account.execute_v1(vec![__call])
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn set_differ_program_hash_getcall(
        &self,
        program_hash: &starknet::core::types::Felt,
    ) -> starknet::core::types::Call {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(program_hash));
        starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("set_differ_program_hash"),
            calldata: __calldata,
        }
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn set_differ_program_hash(
        &self,
        program_hash: &starknet::core::types::Felt,
    ) -> starknet::accounts::ExecutionV1<A> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(program_hash));
        let __call = starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("set_differ_program_hash"),
            calldata: __calldata,
        };
        self.account.execute_v1(vec![__call])
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn set_entity_getcall(
        &self,
        model_selector: &starknet::core::types::Felt,
        index: &ModelIndex,
        values: &Vec<starknet::core::types::Felt>,
        layout: &Layout,
    ) -> starknet::core::types::Call {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(model_selector));
        __calldata.extend(ModelIndex::cairo_serialize(index));
        __calldata.extend(Vec::<starknet::core::types::Felt>::cairo_serialize(values));
        __calldata.extend(Layout::cairo_serialize(layout));
        starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("set_entity"),
            calldata: __calldata,
        }
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn set_entity(
        &self,
        model_selector: &starknet::core::types::Felt,
        index: &ModelIndex,
        values: &Vec<starknet::core::types::Felt>,
        layout: &Layout,
    ) -> starknet::accounts::ExecutionV1<A> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(model_selector));
        __calldata.extend(ModelIndex::cairo_serialize(index));
        __calldata.extend(Vec::<starknet::core::types::Felt>::cairo_serialize(values));
        __calldata.extend(Layout::cairo_serialize(layout));
        let __call = starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("set_entity"),
            calldata: __calldata,
        };
        self.account.execute_v1(vec![__call])
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn set_facts_registry_getcall(
        &self,
        address: &cainome::cairo_serde::ContractAddress,
    ) -> starknet::core::types::Call {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            address,
        ));
        starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("set_facts_registry"),
            calldata: __calldata,
        }
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn set_facts_registry(
        &self,
        address: &cainome::cairo_serde::ContractAddress,
    ) -> starknet::accounts::ExecutionV1<A> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            address,
        ));
        let __call = starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("set_facts_registry"),
            calldata: __calldata,
        };
        self.account.execute_v1(vec![__call])
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn set_merger_program_hash_getcall(
        &self,
        program_hash: &starknet::core::types::Felt,
    ) -> starknet::core::types::Call {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(program_hash));
        starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("set_merger_program_hash"),
            calldata: __calldata,
        }
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn set_merger_program_hash(
        &self,
        program_hash: &starknet::core::types::Felt,
    ) -> starknet::accounts::ExecutionV1<A> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(program_hash));
        let __call = starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("set_merger_program_hash"),
            calldata: __calldata,
        };
        self.account.execute_v1(vec![__call])
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn set_metadata_getcall(&self, metadata: &ResourceMetadata) -> starknet::core::types::Call {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(ResourceMetadata::cairo_serialize(metadata));
        starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("set_metadata"),
            calldata: __calldata,
        }
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn set_metadata(&self, metadata: &ResourceMetadata) -> starknet::accounts::ExecutionV1<A> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(ResourceMetadata::cairo_serialize(metadata));
        let __call = starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("set_metadata"),
            calldata: __calldata,
        };
        self.account.execute_v1(vec![__call])
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn upgrade_getcall(
        &self,
        new_class_hash: &cainome::cairo_serde::ClassHash,
    ) -> starknet::core::types::Call {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(cainome::cairo_serde::ClassHash::cairo_serialize(
            new_class_hash,
        ));
        starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("upgrade"),
            calldata: __calldata,
        }
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn upgrade(
        &self,
        new_class_hash: &cainome::cairo_serde::ClassHash,
    ) -> starknet::accounts::ExecutionV1<A> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(cainome::cairo_serde::ClassHash::cairo_serialize(
            new_class_hash,
        ));
        let __call = starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("upgrade"),
            calldata: __calldata,
        };
        self.account.execute_v1(vec![__call])
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn upgrade_contract_getcall(
        &self,
        selector: &starknet::core::types::Felt,
        class_hash: &cainome::cairo_serde::ClassHash,
    ) -> starknet::core::types::Call {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(selector));
        __calldata.extend(cainome::cairo_serde::ClassHash::cairo_serialize(class_hash));
        starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("upgrade_contract"),
            calldata: __calldata,
        }
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn upgrade_contract(
        &self,
        selector: &starknet::core::types::Felt,
        class_hash: &cainome::cairo_serde::ClassHash,
    ) -> starknet::accounts::ExecutionV1<A> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(selector));
        __calldata.extend(cainome::cairo_serde::ClassHash::cairo_serialize(class_hash));
        let __call = starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("upgrade_contract"),
            calldata: __calldata,
        };
        self.account.execute_v1(vec![__call])
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn upgrade_model_getcall(
        &self,
        class_hash: &cainome::cairo_serde::ClassHash,
    ) -> starknet::core::types::Call {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(cainome::cairo_serde::ClassHash::cairo_serialize(class_hash));
        starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("upgrade_model"),
            calldata: __calldata,
        }
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn upgrade_model(
        &self,
        class_hash: &cainome::cairo_serde::ClassHash,
    ) -> starknet::accounts::ExecutionV1<A> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(cainome::cairo_serde::ClassHash::cairo_serialize(class_hash));
        let __call = starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("upgrade_model"),
            calldata: __calldata,
        };
        self.account.execute_v1(vec![__call])
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn upgrade_state_getcall(
        &self,
        new_state: &Vec<StorageUpdate>,
        program_output: &ProgramOutput,
        program_hash: &starknet::core::types::Felt,
    ) -> starknet::core::types::Call {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(Vec::<StorageUpdate>::cairo_serialize(new_state));
        __calldata.extend(ProgramOutput::cairo_serialize(program_output));
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(program_hash));
        starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("upgrade_state"),
            calldata: __calldata,
        }
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn upgrade_state(
        &self,
        new_state: &Vec<StorageUpdate>,
        program_output: &ProgramOutput,
        program_hash: &starknet::core::types::Felt,
    ) -> starknet::accounts::ExecutionV1<A> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(Vec::<StorageUpdate>::cairo_serialize(new_state));
        __calldata.extend(ProgramOutput::cairo_serialize(program_output));
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(program_hash));
        let __call = starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("upgrade_state"),
            calldata: __calldata,
        };
        self.account.execute_v1(vec![__call])
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn uuid_getcall(&self) -> starknet::core::types::Call {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("uuid"),
            calldata: __calldata,
        }
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn uuid(&self) -> starknet::accounts::ExecutionV1<A> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        let __call = starknet::core::types::Call {
            to: self.address,
            selector: starknet::macros::selector!("uuid"),
            calldata: __calldata,
        };
        self.account.execute_v1(vec![__call])
    }
}
impl<P: starknet::providers::Provider + Sync> WorldContractReader<P> {
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn base(&self) -> cainome::cairo_serde::call::FCall<P, cainome::cairo_serde::ClassHash> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("base"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn emit(
        &self,
        keys: &Vec<starknet::core::types::Felt>,
        values: &Vec<starknet::core::types::Felt>,
    ) -> cainome::cairo_serde::call::FCall<P, ()> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(Vec::<starknet::core::types::Felt>::cairo_serialize(keys));
        __calldata.extend(Vec::<starknet::core::types::Felt>::cairo_serialize(values));
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("emit"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn entity(
        &self,
        model_selector: &starknet::core::types::Felt,
        index: &ModelIndex,
        layout: &Layout,
    ) -> cainome::cairo_serde::call::FCall<P, Vec<starknet::core::types::Felt>> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(model_selector));
        __calldata.extend(ModelIndex::cairo_serialize(index));
        __calldata.extend(Layout::cairo_serialize(layout));
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("entity"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn get_differ_program_hash(
        &self,
    ) -> cainome::cairo_serde::call::FCall<P, starknet::core::types::Felt> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("get_differ_program_hash"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn get_facts_registry(
        &self,
    ) -> cainome::cairo_serde::call::FCall<P, cainome::cairo_serde::ContractAddress> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("get_facts_registry"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn get_merger_program_hash(
        &self,
    ) -> cainome::cairo_serde::call::FCall<P, starknet::core::types::Felt> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("get_merger_program_hash"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn is_owner(
        &self,
        resource: &starknet::core::types::Felt,
        address: &cainome::cairo_serde::ContractAddress,
    ) -> cainome::cairo_serde::call::FCall<P, bool> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(resource));
        __calldata.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            address,
        ));
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("is_owner"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn is_writer(
        &self,
        resource: &starknet::core::types::Felt,
        contract: &cainome::cairo_serde::ContractAddress,
    ) -> cainome::cairo_serde::call::FCall<P, bool> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(resource));
        __calldata.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            contract,
        ));
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("is_writer"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn metadata(
        &self,
        resource_selector: &starknet::core::types::Felt,
    ) -> cainome::cairo_serde::call::FCall<P, ResourceMetadata> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(
            resource_selector,
        ));
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("metadata"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
    #[allow(clippy::ptr_arg)]
    #[allow(clippy::too_many_arguments)]
    pub fn resource(
        &self,
        selector: &starknet::core::types::Felt,
    ) -> cainome::cairo_serde::call::FCall<P, Resource> {
        use cainome::cairo_serde::CairoSerde;
        let mut __calldata = vec![];
        __calldata.extend(starknet::core::types::Felt::cairo_serialize(selector));
        let __call = starknet::core::types::FunctionCall {
            contract_address: self.address,
            entry_point_selector: starknet::macros::selector!("resource"),
            calldata: __calldata,
        };
        cainome::cairo_serde::call::FCall::new(__call, self.provider())
    }
}
